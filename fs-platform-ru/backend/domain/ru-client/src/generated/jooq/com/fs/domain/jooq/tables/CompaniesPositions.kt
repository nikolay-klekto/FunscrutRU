/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.tables


import com.fs.domain.jooq.Public
import com.fs.domain.jooq.keys.COMPANIES_POSITIONS__COMPANIES_POSITIONS_COMPANY_ID_FKEY
import com.fs.domain.jooq.keys.COMPANIES_POSITIONS__COMPANIES_POSITIONS_POSITION_ID_FKEY
import com.fs.domain.jooq.tables.records.CompaniesPositionsRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CompaniesPositions(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CompaniesPositionsRecord>?,
    aliased: Table<CompaniesPositionsRecord>?,
    parameters: Array<Field<*>?>?
) : TableImpl<CompaniesPositionsRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.companies_positions</code>
         */
        val COMPANIES_POSITIONS: CompaniesPositions = CompaniesPositions()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CompaniesPositionsRecord> = CompaniesPositionsRecord::class.java

    /**
     * The column <code>public.companies_positions.company_id</code>.
     */
    val COMPANY_ID: TableField<CompaniesPositionsRecord, Long?> =
        createField(DSL.name("company_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.companies_positions.position_id</code>.
     */
    val POSITION_ID: TableField<CompaniesPositionsRecord, Long?> =
        createField(DSL.name("position_id"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<CompaniesPositionsRecord>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CompaniesPositionsRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        aliased,
        parameters
    )

    /**
     * Create an aliased <code>public.companies_positions</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.companies_positions</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.companies_positions</code> table reference
     */
    constructor() : this(DSL.name("companies_positions"), null)

    constructor(
        child: Table<out Record>,
        key: ForeignKey<out Record, CompaniesPositionsRecord>
    ) : this(Internal.createPathAlias(child, key), child, key, COMPANIES_POSITIONS, null)

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getReferences(): List<ForeignKey<CompaniesPositionsRecord, *>> = listOf(
        COMPANIES_POSITIONS__COMPANIES_POSITIONS_COMPANY_ID_FKEY,
        COMPANIES_POSITIONS__COMPANIES_POSITIONS_POSITION_ID_FKEY
    )

    private lateinit var _company: Company
    private lateinit var _position: Position

    /**
     * Get the implicit join path to the <code>public.company</code> table.
     */
    fun company(): Company {
        if (!this::_company.isInitialized)
            _company = Company(this, COMPANIES_POSITIONS__COMPANIES_POSITIONS_COMPANY_ID_FKEY)

        return _company;
    }

    /**
     * Get the implicit join path to the <code>public.position</code> table.
     */
    fun position(): Position {
        if (!this::_position.isInitialized)
            _position = Position(this, COMPANIES_POSITIONS__COMPANIES_POSITIONS_POSITION_ID_FKEY)

        return _position;
    }
    override fun `as`(alias: String): CompaniesPositions = CompaniesPositions(DSL.name(alias), this)
    override fun `as`(alias: Name): CompaniesPositions = CompaniesPositions(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): CompaniesPositions = CompaniesPositions(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CompaniesPositions = CompaniesPositions(name, null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<Long?, Long?> = super.fieldsRow() as Row2<Long?, Long?>
}
