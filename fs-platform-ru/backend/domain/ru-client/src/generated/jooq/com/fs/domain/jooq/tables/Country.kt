/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.tables


import com.fs.client.ru.enums.CountryNameModel
import com.fs.client.ru.enums.CurrencyModel
import com.fs.domain.jooq.Public
import com.fs.domain.jooq.enums.Countries
import com.fs.domain.jooq.enums.Currency
import com.fs.domain.jooq.keys.COUNTRY_PKEY
import com.fs.domain.jooq.tables.records.CountryRecord
import org.jooq.*
import org.jooq.impl.*
import org.jooq.impl.Internal


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Country(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CountryRecord>?,
    aliased: Table<CountryRecord>?,
    parameters: Array<Field<*>?>?
) : TableImpl<CountryRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.country</code>
         */
        val COUNTRY: Country = Country()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CountryRecord> = CountryRecord::class.java

    /**
     * The column <code>public.country.code</code>.
     */
    val CODE: TableField<CountryRecord, Long?> =
        createField(DSL.name("code"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.country.currency</code>.
     */
    val CURRENCY: TableField<CountryRecord, CurrencyModel?> = createField(
        DSL.name("currency"),
        SQLDataType.VARCHAR.asEnumDataType(com.fs.domain.jooq.enums.Currency::class.java),
        this,
        "",
        EnumConverter<Currency, CurrencyModel>(Currency::class.java, CurrencyModel::class.java)
    )

    /**
     * The column <code>public.country.name</code>.
     */
    val NAME: TableField<CountryRecord, CountryNameModel?> = createField(
        DSL.name("name"),
        SQLDataType.VARCHAR.asEnumDataType(com.fs.domain.jooq.enums.Countries::class.java),
        this,
        "",
        EnumConverter<Countries, CountryNameModel>(Countries::class.java, CountryNameModel::class.java)
    )

    private constructor(alias: Name, aliased: Table<CountryRecord>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CountryRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        aliased,
        parameters
    )

    /**
     * Create an aliased <code>public.country</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.country</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.country</code> table reference
     */
    constructor() : this(DSL.name("country"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CountryRecord>) : this(
        Internal.createPathAlias(
            child,
            key
        ), child, key, COUNTRY, null
    )

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<CountryRecord, Long?> = super.getIdentity() as Identity<CountryRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<CountryRecord> = COUNTRY_PKEY
    override fun `as`(alias: String): Country = Country(DSL.name(alias), this)
    override fun `as`(alias: Name): Country = Country(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Country = Country(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Country = Country(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Long?, CurrencyModel?, CountryNameModel?> =
        super.fieldsRow() as Row3<Long?, CurrencyModel?, CountryNameModel?>
}
