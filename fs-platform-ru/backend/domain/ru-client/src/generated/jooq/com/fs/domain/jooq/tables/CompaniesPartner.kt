/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.tables


import com.fs.domain.jooq.Public
import com.fs.domain.jooq.keys.COMPANIES_PARTNER_PKEY
import com.fs.domain.jooq.keys.COMPANIES_PARTNER__COMPANIES_PARTNER_COMPANIES_ID_FKEY
import com.fs.domain.jooq.keys.COMPANIES_PARTNER__COMPANIES_PARTNER_PARTNER_ID_FKEY
import com.fs.domain.jooq.tables.records.CompaniesPartnerRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CompaniesPartner(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CompaniesPartnerRecord>?,
    aliased: Table<CompaniesPartnerRecord>?,
    parameters: Array<Field<*>?>?
) : TableImpl<CompaniesPartnerRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.companies_partner</code>
         */
        val COMPANIES_PARTNER: CompaniesPartner = CompaniesPartner()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CompaniesPartnerRecord> = CompaniesPartnerRecord::class.java

    /**
     * The column <code>public.companies_partner.companies_id</code>.
     */
    val COMPANIES_ID: TableField<CompaniesPartnerRecord, Int?> =
        createField(DSL.name("companies_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.companies_partner.partner_id</code>.
     */
    val PARTNER_ID: TableField<CompaniesPartnerRecord, Int?> =
        createField(DSL.name("partner_id"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<CompaniesPartnerRecord>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CompaniesPartnerRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        aliased,
        parameters
    )

    /**
     * Create an aliased <code>public.companies_partner</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.companies_partner</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.companies_partner</code> table reference
     */
    constructor() : this(DSL.name("companies_partner"), null)

    constructor(
        child: Table<out Record>,
        key: ForeignKey<out Record, CompaniesPartnerRecord>
    ) : this(Internal.createPathAlias(child, key), child, key, COMPANIES_PARTNER, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<CompaniesPartnerRecord> = COMPANIES_PARTNER_PKEY
    override fun getReferences(): List<ForeignKey<CompaniesPartnerRecord, *>> = listOf(
        COMPANIES_PARTNER__COMPANIES_PARTNER_COMPANIES_ID_FKEY,
        COMPANIES_PARTNER__COMPANIES_PARTNER_PARTNER_ID_FKEY
    )

    private lateinit var _companies: Companies
    private lateinit var _partner: Partner

    /**
     * Get the implicit join path to the <code>public.companies</code> table.
     */
    fun companies(): Companies {
        if (!this::_companies.isInitialized)
            _companies = Companies(this, COMPANIES_PARTNER__COMPANIES_PARTNER_COMPANIES_ID_FKEY)

        return _companies;
    }

    /**
     * Get the implicit join path to the <code>public.partner</code> table.
     */
    fun partner(): Partner {
        if (!this::_partner.isInitialized)
            _partner = Partner(this, COMPANIES_PARTNER__COMPANIES_PARTNER_PARTNER_ID_FKEY)

        return _partner;
    }
    override fun `as`(alias: String): CompaniesPartner = CompaniesPartner(DSL.name(alias), this)
    override fun `as`(alias: Name): CompaniesPartner = CompaniesPartner(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): CompaniesPartner = CompaniesPartner(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CompaniesPartner = CompaniesPartner(name, null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<Int?, Int?> = super.fieldsRow() as Row2<Int?, Int?>
}
