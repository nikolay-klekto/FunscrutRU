/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.tables.records


import com.fs.domain.jooq.tables.Review
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl
import java.time.LocalDateTime


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ReviewRecord() : UpdatableRecordImpl<ReviewRecord>(Review.REVIEW),
    Record6<Int?, Int?, LocalDateTime?, String?, Int?, String?> {

    var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    var companyId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    var dateCreated: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    var description: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    var rate: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    var username: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Int?, Int?, LocalDateTime?, String?, Int?, String?> =
        super.fieldsRow() as Row6<Int?, Int?, LocalDateTime?, String?, Int?, String?>

    override fun valuesRow(): Row6<Int?, Int?, LocalDateTime?, String?, Int?, String?> =
        super.valuesRow() as Row6<Int?, Int?, LocalDateTime?, String?, Int?, String?>

    override fun field1(): Field<Int?> = Review.REVIEW.ID
    override fun field2(): Field<Int?> = Review.REVIEW.COMPANY_ID
    override fun field3(): Field<LocalDateTime?> = Review.REVIEW.DATE_CREATED
    override fun field4(): Field<String?> = Review.REVIEW.DESCRIPTION
    override fun field5(): Field<Int?> = Review.REVIEW.RATE
    override fun field6(): Field<String?> = Review.REVIEW.USERNAME
    override fun component1(): Int? = id
    override fun component2(): Int? = companyId
    override fun component3(): LocalDateTime? = dateCreated
    override fun component4(): String? = description
    override fun component5(): Int? = rate
    override fun component6(): String? = username
    override fun value1(): Int? = id
    override fun value2(): Int? = companyId
    override fun value3(): LocalDateTime? = dateCreated
    override fun value4(): String? = description
    override fun value5(): Int? = rate
    override fun value6(): String? = username

    override fun value1(value: Int?): ReviewRecord {
        this.id = value
        return this
    }

    override fun value2(value: Int?): ReviewRecord {
        this.companyId = value
        return this
    }

    override fun value3(value: LocalDateTime?): ReviewRecord {
        this.dateCreated = value
        return this
    }

    override fun value4(value: String?): ReviewRecord {
        this.description = value
        return this
    }

    override fun value5(value: Int?): ReviewRecord {
        this.rate = value
        return this
    }

    override fun value6(value: String?): ReviewRecord {
        this.username = value
        return this
    }

    override fun values(
        value1: Int?,
        value2: Int?,
        value3: LocalDateTime?,
        value4: String?,
        value5: Int?,
        value6: String?
    ): ReviewRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised ReviewRecord
     */
    constructor(
        id: Int? = null,
        companyId: Int? = null,
        dateCreated: LocalDateTime? = null,
        description: String? = null,
        rate: Int? = null,
        username: String? = null
    ) : this() {
        this.id = id
        this.companyId = companyId
        this.dateCreated = dateCreated
        this.description = description
        this.rate = rate
        this.username = username
    }

    /**
     * Create a detached, initialised ReviewRecord
     */
    constructor(value: com.fs.domain.jooq.tables.pojos.Review?) : this() {
        if (value != null) {
            this.id = value.id
            this.companyId = value.companyId
            this.dateCreated = value.dateCreated
            this.description = value.description
            this.rate = value.rate
            this.username = value.username
        }
    }
}
