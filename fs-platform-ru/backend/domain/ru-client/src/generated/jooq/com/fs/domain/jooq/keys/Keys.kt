/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.keys


import com.fs.domain.jooq.tables.*
import com.fs.domain.jooq.tables.records.*
import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal


// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val ADDRESS_PKEY: UniqueKey<AddressRecord> =
    Internal.createUniqueKey(Address.ADDRESS, DSL.name("address_pkey"), arrayOf(Address.ADDRESS.ID), true)
val BASKET_PKEY: UniqueKey<BasketRecord> =
    Internal.createUniqueKey(Basket.BASKET, DSL.name("basket_pkey"), arrayOf(Basket.BASKET.ID), true)
val CITIES_PKEY: UniqueKey<CitiesRecord> =
    Internal.createUniqueKey(Cities.CITIES, DSL.name("cities_pkey"), arrayOf(Cities.CITIES.ID), true)
val CLIENT_PKEY: UniqueKey<ClientRecord> =
    Internal.createUniqueKey(Client.CLIENT, DSL.name("client_pkey"), arrayOf(Client.CLIENT.ID), true)
val COMPANIES_PKEY: UniqueKey<CompaniesRecord> =
    Internal.createUniqueKey(Companies.COMPANIES, DSL.name("companies_pkey"), arrayOf(Companies.COMPANIES.ID), true)
val COMPANIES_PARTNER_PKEY: UniqueKey<CompaniesPartnerRecord> = Internal.createUniqueKey(
    CompaniesPartner.COMPANIES_PARTNER,
    DSL.name("companies_partner_pkey"),
    arrayOf(CompaniesPartner.COMPANIES_PARTNER.COMPANIES_ID, CompaniesPartner.COMPANIES_PARTNER.PARTNER_ID),
    true
)
val COUNTRY_PKEY: UniqueKey<CountryRecord> =
    Internal.createUniqueKey(Country.COUNTRY, DSL.name("country_pkey"), arrayOf(Country.COUNTRY.CODE), true)
val OFFICE_PKEY: UniqueKey<OfficeRecord> =
    Internal.createUniqueKey(Office.OFFICE, DSL.name("office_pkey"), arrayOf(Office.OFFICE.ID), true)
val ORDER_PKEY: UniqueKey<OrderRecord> =
    Internal.createUniqueKey(Order.ORDER, DSL.name("order_pkey"), arrayOf(Order.ORDER.ID), true)
val PARTNER_PKEY: UniqueKey<PartnerRecord> =
    Internal.createUniqueKey(Partner.PARTNER, DSL.name("partner_pkey"), arrayOf(Partner.PARTNER.ID), true)
val POSITION_PKEY: UniqueKey<PositionRecord> =
    Internal.createUniqueKey(Position.POSITION, DSL.name("position_pkey"), arrayOf(Position.POSITION.ID), true)
val REVIEW_PKEY: UniqueKey<ReviewRecord> =
    Internal.createUniqueKey(Review.REVIEW, DSL.name("review_pkey"), arrayOf(Review.REVIEW.ID), true)
val SERVICE_PKEY: UniqueKey<ServiceRecord> =
    Internal.createUniqueKey(Service.SERVICE, DSL.name("service_pkey"), arrayOf(Service.SERVICE.ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val ADDRESS__ADDRESS_CITY_ID_FKEY: ForeignKey<AddressRecord, CitiesRecord> = Internal.createForeignKey(
    Address.ADDRESS,
    DSL.name("address_city_id_fkey"),
    arrayOf(Address.ADDRESS.CITY_ID),
    com.fs.domain.jooq.keys.CITIES_PKEY,
    arrayOf(Cities.CITIES.ID),
    true
)
val CITIES__CITIES_COUNTRY_CODE_FKEY: ForeignKey<CitiesRecord, CountryRecord> = Internal.createForeignKey(
    Cities.CITIES,
    DSL.name("cities_country_code_fkey"),
    arrayOf(Cities.CITIES.COUNTRY_CODE),
    com.fs.domain.jooq.keys.COUNTRY_PKEY,
    arrayOf(Country.COUNTRY.CODE),
    true
)
val CLIENT__CLIENT_BASKET_ID_FKEY: ForeignKey<ClientRecord, BasketRecord> = Internal.createForeignKey(
    Client.CLIENT,
    DSL.name("client_basket_id_fkey"),
    arrayOf(Client.CLIENT.BASKET_ID),
    com.fs.domain.jooq.keys.BASKET_PKEY,
    arrayOf(Basket.BASKET.ID),
    true
)
val CLIENT__CLIENT_CITY_ID_FKEY: ForeignKey<ClientRecord, CitiesRecord> = Internal.createForeignKey(
    Client.CLIENT,
    DSL.name("client_city_id_fkey"),
    arrayOf(Client.CLIENT.CITY_ID),
    com.fs.domain.jooq.keys.CITIES_PKEY,
    arrayOf(Cities.CITIES.ID),
    true
)
val COMPANIES_PARTNER__COMPANIES_PARTNER_COMPANIES_ID_FKEY: ForeignKey<CompaniesPartnerRecord, CompaniesRecord> =
    Internal.createForeignKey(
        CompaniesPartner.COMPANIES_PARTNER,
        DSL.name("companies_partner_companies_id_fkey"),
        arrayOf(CompaniesPartner.COMPANIES_PARTNER.COMPANIES_ID),
        com.fs.domain.jooq.keys.COMPANIES_PKEY,
        arrayOf(Companies.COMPANIES.ID),
        true
    )
val COMPANIES_PARTNER__COMPANIES_PARTNER_PARTNER_ID_FKEY: ForeignKey<CompaniesPartnerRecord, PartnerRecord> =
    Internal.createForeignKey(
        CompaniesPartner.COMPANIES_PARTNER,
        DSL.name("companies_partner_partner_id_fkey"),
        arrayOf(CompaniesPartner.COMPANIES_PARTNER.PARTNER_ID),
        com.fs.domain.jooq.keys.PARTNER_PKEY,
        arrayOf(Partner.PARTNER.ID),
        true
    )
val COMPANIES_POSITIONS__COMPANIES_POSITIONS_COMPANY_ID_FKEY: ForeignKey<CompaniesPositionsRecord, CompaniesRecord> =
    Internal.createForeignKey(
        CompaniesPositions.COMPANIES_POSITIONS,
        DSL.name("companies_positions_company_id_fkey"),
        arrayOf(CompaniesPositions.COMPANIES_POSITIONS.COMPANY_ID),
        com.fs.domain.jooq.keys.COMPANIES_PKEY,
        arrayOf(Companies.COMPANIES.ID),
        true
    )
val COMPANIES_POSITIONS__COMPANIES_POSITIONS_POSITION_ID_FKEY: ForeignKey<CompaniesPositionsRecord, PositionRecord> =
    Internal.createForeignKey(
        CompaniesPositions.COMPANIES_POSITIONS,
        DSL.name("companies_positions_position_id_fkey"),
        arrayOf(CompaniesPositions.COMPANIES_POSITIONS.POSITION_ID),
        com.fs.domain.jooq.keys.POSITION_PKEY,
        arrayOf(Position.POSITION.ID),
        true
    )
val OFFICE__OFFICE_ADDRESS_ID_FKEY: ForeignKey<OfficeRecord, AddressRecord> = Internal.createForeignKey(
    Office.OFFICE,
    DSL.name("office_address_id_fkey"),
    arrayOf(Office.OFFICE.ADDRESS_ID),
    com.fs.domain.jooq.keys.ADDRESS_PKEY,
    arrayOf(Address.ADDRESS.ID),
    true
)
val OFFICE__OFFICE_COMPANY_ID_FKEY: ForeignKey<OfficeRecord, CompaniesRecord> = Internal.createForeignKey(
    Office.OFFICE,
    DSL.name("office_company_id_fkey"),
    arrayOf(Office.OFFICE.COMPANY_ID),
    com.fs.domain.jooq.keys.COMPANIES_PKEY,
    arrayOf(Companies.COMPANIES.ID),
    true
)
val ORDER__ORDER_BASKET_ID_FKEY: ForeignKey<OrderRecord, BasketRecord> = Internal.createForeignKey(
    Order.ORDER,
    DSL.name("order_basket_id_fkey"),
    arrayOf(Order.ORDER.BASKET_ID),
    com.fs.domain.jooq.keys.BASKET_PKEY,
    arrayOf(Basket.BASKET.ID),
    true
)
val ORDER__ORDER_CITY_ID_FKEY: ForeignKey<OrderRecord, CitiesRecord> = Internal.createForeignKey(
    Order.ORDER,
    DSL.name("order_city_id_fkey"),
    arrayOf(Order.ORDER.CITY_ID),
    com.fs.domain.jooq.keys.CITIES_PKEY,
    arrayOf(Cities.CITIES.ID),
    true
)
val ORDER__ORDER_COMPANY_ID_FKEY: ForeignKey<OrderRecord, CompaniesRecord> = Internal.createForeignKey(
    Order.ORDER,
    DSL.name("order_company_id_fkey"),
    arrayOf(Order.ORDER.COMPANY_ID),
    com.fs.domain.jooq.keys.COMPANIES_PKEY,
    arrayOf(Companies.COMPANIES.ID),
    true
)
val ORDER__ORDER_POSITION_ID_FKEY: ForeignKey<OrderRecord, PositionRecord> = Internal.createForeignKey(
    Order.ORDER,
    DSL.name("order_position_id_fkey"),
    arrayOf(Order.ORDER.POSITION_ID),
    com.fs.domain.jooq.keys.POSITION_PKEY,
    arrayOf(Position.POSITION.ID),
    true
)
val ORDER__ORDER_SERVICE_ID_FKEY: ForeignKey<OrderRecord, ServiceRecord> = Internal.createForeignKey(
    Order.ORDER,
    DSL.name("order_service_id_fkey"),
    arrayOf(Order.ORDER.SERVICE_ID),
    com.fs.domain.jooq.keys.SERVICE_PKEY,
    arrayOf(Service.SERVICE.ID),
    true
)
val PARTNER__PARTNER_CLIENT_ID_FKEY: ForeignKey<PartnerRecord, ClientRecord> = Internal.createForeignKey(
    Partner.PARTNER,
    DSL.name("partner_client_id_fkey"),
    arrayOf(Partner.PARTNER.CLIENT_ID),
    com.fs.domain.jooq.keys.CLIENT_PKEY,
    arrayOf(Client.CLIENT.ID),
    true
)
val REVIEW__REVIEW_COMPANY_ID_FKEY: ForeignKey<ReviewRecord, CompaniesRecord> = Internal.createForeignKey(
    Review.REVIEW,
    DSL.name("review_company_id_fkey"),
    arrayOf(Review.REVIEW.COMPANY_ID),
    com.fs.domain.jooq.keys.COMPANIES_PKEY,
    arrayOf(Companies.COMPANIES.ID),
    true
)
