/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.tables


import com.fs.domain.jooq.Public
import com.fs.domain.jooq.enums.Industry
import com.fs.domain.jooq.keys.COMPANIES_PKEY
import com.fs.domain.jooq.tables.records.CompaniesRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Companies(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CompaniesRecord>?,
    aliased: Table<CompaniesRecord>?,
    parameters: Array<Field<*>?>?
) : TableImpl<CompaniesRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.companies</code>
         */
        val COMPANIES: Companies = Companies()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CompaniesRecord> = CompaniesRecord::class.java

    /**
     * The column <code>public.companies.id</code>.
     */
    val ID: TableField<CompaniesRecord, Int?> =
        createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.companies.company_industry</code>.
     */
    val COMPANY_INDUSTRY: TableField<CompaniesRecord, Industry?> = createField(
        DSL.name("company_industry"),
        SQLDataType.VARCHAR.asEnumDataType(com.fs.domain.jooq.enums.Industry::class.java),
        this,
        ""
    )

    /**
     * The column <code>public.companies.name</code>.
     */
    val NAME: TableField<CompaniesRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.companies.site</code>.
     */
    val SITE: TableField<CompaniesRecord, String?> = createField(DSL.name("site"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.companies.short_description</code>.
     */
    val SHORT_DESCRIPTION: TableField<CompaniesRecord, String?> =
        createField(DSL.name("short_description"), SQLDataType.VARCHAR, this, "")

    private constructor(alias: Name, aliased: Table<CompaniesRecord>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CompaniesRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        aliased,
        parameters
    )

    /**
     * Create an aliased <code>public.companies</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.companies</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.companies</code> table reference
     */
    constructor() : this(DSL.name("companies"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CompaniesRecord>) : this(
        Internal.createPathAlias(
            child,
            key
        ), child, key, COMPANIES, null
    )

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<CompaniesRecord, Int?> = super.getIdentity() as Identity<CompaniesRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<CompaniesRecord> = COMPANIES_PKEY
    override fun `as`(alias: String): Companies = Companies(DSL.name(alias), this)
    override fun `as`(alias: Name): Companies = Companies(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Companies = Companies(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Companies = Companies(name, null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<Int?, Industry?, String?, String?, String?> =
        super.fieldsRow() as Row5<Int?, Industry?, String?, String?, String?>
}
