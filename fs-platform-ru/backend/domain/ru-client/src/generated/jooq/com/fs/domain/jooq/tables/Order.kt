/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.tables


import com.fs.domain.jooq.Public
import com.fs.domain.jooq.keys.*
import com.fs.domain.jooq.tables.records.OrderRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.LocalDateTime


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Order(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, OrderRecord>?,
    aliased: Table<OrderRecord>?,
    parameters: Array<Field<*>?>?
) : TableImpl<OrderRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.order</code>
         */
        val ORDER: Order = Order()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<OrderRecord> = OrderRecord::class.java

    /**
     * The column <code>public.order.id</code>.
     */
    val ID: TableField<OrderRecord, Long?> =
        createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.order.basket_id</code>.
     */
    val BASKET_ID: TableField<OrderRecord, Long?> = createField(DSL.name("basket_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.order.city_id</code>.
     */
    val CITY_ID: TableField<OrderRecord, Long?> = createField(DSL.name("city_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.order.company_id</code>.
     */
    val COMPANY_ID: TableField<OrderRecord, Long?> = createField(DSL.name("company_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.order.position_id</code>.
     */
    val POSITION_ID: TableField<OrderRecord, Long?> = createField(DSL.name("position_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.order.service_id</code>.
     */
    val SERVICE_ID: TableField<OrderRecord, Long?> = createField(DSL.name("service_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.order.is_expired</code>.
     */
    val IS_EXPIRED: TableField<OrderRecord, Boolean?> =
        createField(DSL.name("is_expired"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>public.order.start_work_date</code>.
     */
    val START_WORK_DATE: TableField<OrderRecord, LocalDateTime?> =
        createField(DSL.name("start_work_date"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.order.total_work_days</code>.
     */
    val TOTAL_WORK_DAYS: TableField<OrderRecord, Long?> =
        createField(DSL.name("total_work_days"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<OrderRecord>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<OrderRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        aliased,
        parameters
    )

    /**
     * Create an aliased <code>public.order</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.order</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.order</code> table reference
     */
    constructor() : this(DSL.name("order"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, OrderRecord>) : this(
        Internal.createPathAlias(
            child,
            key
        ), child, key, ORDER, null
    )
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<OrderRecord, Long?> = super.getIdentity() as Identity<OrderRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<OrderRecord> = ORDER_PKEY
    override fun getReferences(): List<ForeignKey<OrderRecord, *>> = listOf(
        ORDER__ORDER_BASKET_ID_FKEY,
        ORDER__ORDER_CITY_ID_FKEY,
        ORDER__ORDER_COMPANY_ID_FKEY,
        ORDER__ORDER_POSITION_ID_FKEY,
        ORDER__ORDER_SERVICE_ID_FKEY
    )

    private lateinit var _basket: Basket
    private lateinit var _city: City
    private lateinit var _company: Company
    private lateinit var _position: Position
    private lateinit var _service: Service

    /**
     * Get the implicit join path to the <code>public.basket</code> table.
     */
    fun basket(): Basket {
        if (!this::_basket.isInitialized)
            _basket = Basket(this, ORDER__ORDER_BASKET_ID_FKEY)

        return _basket;
    }

    /**
     * Get the implicit join path to the <code>public.city</code> table.
     */
    fun city(): City {
        if (!this::_city.isInitialized)
            _city = City(this, ORDER__ORDER_CITY_ID_FKEY)

        return _city;
    }

    /**
     * Get the implicit join path to the <code>public.company</code> table.
     */
    fun company(): Company {
        if (!this::_company.isInitialized)
            _company = Company(this, ORDER__ORDER_COMPANY_ID_FKEY)

        return _company;
    }

    /**
     * Get the implicit join path to the <code>public.position</code> table.
     */
    fun position(): Position {
        if (!this::_position.isInitialized)
            _position = Position(this, ORDER__ORDER_POSITION_ID_FKEY)

        return _position;
    }

    /**
     * Get the implicit join path to the <code>public.service</code> table.
     */
    fun service(): Service {
        if (!this::_service.isInitialized)
            _service = Service(this, ORDER__ORDER_SERVICE_ID_FKEY)

        return _service;
    }
    override fun `as`(alias: String): Order = Order(DSL.name(alias), this)
    override fun `as`(alias: Name): Order = Order(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Order = Order(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Order = Order(name, null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<Long?, Long?, Long?, Long?, Long?, Long?, Boolean?, LocalDateTime?, Long?> =
        super.fieldsRow() as Row9<Long?, Long?, Long?, Long?, Long?, Long?, Boolean?, LocalDateTime?, Long?>
}
