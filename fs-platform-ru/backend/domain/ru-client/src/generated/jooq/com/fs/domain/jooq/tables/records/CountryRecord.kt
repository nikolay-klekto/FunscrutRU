/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.tables.records


import com.fs.client.ru.enums.CountryNameModel
import com.fs.client.ru.enums.CurrencyModel
import com.fs.domain.jooq.tables.Country

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CountryRecord() : UpdatableRecordImpl<CountryRecord>(Country.COUNTRY),
    Record3<Long?, CurrencyModel?, CountryNameModel?> {

    var code: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    var currency: CurrencyModel?
        set(value): Unit = set(1, value)
        get(): CurrencyModel? = get(1) as CurrencyModel?

    var name: CountryNameModel?
        set(value): Unit = set(2, value)
        get(): CountryNameModel? = get(2) as CountryNameModel?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Long?, CurrencyModel?, CountryNameModel?> =
        super.fieldsRow() as Row3<Long?, CurrencyModel?, CountryNameModel?>

    override fun valuesRow(): Row3<Long?, CurrencyModel?, CountryNameModel?> =
        super.valuesRow() as Row3<Long?, CurrencyModel?, CountryNameModel?>

    override fun field1(): Field<Long?> = Country.COUNTRY.CODE
    override fun field2(): Field<CurrencyModel?> = Country.COUNTRY.CURRENCY
    override fun field3(): Field<CountryNameModel?> = Country.COUNTRY.NAME
    override fun component1(): Long? = code
    override fun component2(): CurrencyModel? = currency
    override fun component3(): CountryNameModel? = name
    override fun value1(): Long? = code
    override fun value2(): CurrencyModel? = currency
    override fun value3(): CountryNameModel? = name

    override fun value1(value: Long?): CountryRecord {
        this.code = value
        return this
    }

    override fun value2(value: CurrencyModel?): CountryRecord {
        this.currency = value
        return this
    }

    override fun value3(value: CountryNameModel?): CountryRecord {
        this.name = value
        return this
    }

    override fun values(value1: Long?, value2: CurrencyModel?, value3: CountryNameModel?): CountryRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised CountryRecord
     */
    constructor(code: Long? = null, currency: CurrencyModel? = null, name: CountryNameModel? = null) : this() {
        this.code = code
        this.currency = currency
        this.name = name
    }

    /**
     * Create a detached, initialised CountryRecord
     */
    constructor(value: com.fs.domain.jooq.tables.pojos.Country?) : this() {
        if (value != null) {
            this.code = value.code
            this.currency = value.currency
            this.name = value.name
        }
    }
}
