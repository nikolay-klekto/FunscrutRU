/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.tables.records


import com.fs.domain.jooq.tables.Address

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AddressRecord() : UpdatableRecordImpl<AddressRecord>(Address.ADDRESS),
    Record6<Int?, Int?, Int?, Int?, Int?, String?> {

    var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    var cityId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    var apartment: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    var building: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    var house: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    var street: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Int?, Int?, Int?, Int?, Int?, String?> =
        super.fieldsRow() as Row6<Int?, Int?, Int?, Int?, Int?, String?>

    override fun valuesRow(): Row6<Int?, Int?, Int?, Int?, Int?, String?> =
        super.valuesRow() as Row6<Int?, Int?, Int?, Int?, Int?, String?>

    override fun field1(): Field<Int?> = Address.ADDRESS.ID
    override fun field2(): Field<Int?> = Address.ADDRESS.CITY_ID
    override fun field3(): Field<Int?> = Address.ADDRESS.APARTMENT
    override fun field4(): Field<Int?> = Address.ADDRESS.BUILDING
    override fun field5(): Field<Int?> = Address.ADDRESS.HOUSE
    override fun field6(): Field<String?> = Address.ADDRESS.STREET
    override fun component1(): Int? = id
    override fun component2(): Int? = cityId
    override fun component3(): Int? = apartment
    override fun component4(): Int? = building
    override fun component5(): Int? = house
    override fun component6(): String? = street
    override fun value1(): Int? = id
    override fun value2(): Int? = cityId
    override fun value3(): Int? = apartment
    override fun value4(): Int? = building
    override fun value5(): Int? = house
    override fun value6(): String? = street

    override fun value1(value: Int?): AddressRecord {
        this.id = value
        return this
    }

    override fun value2(value: Int?): AddressRecord {
        this.cityId = value
        return this
    }

    override fun value3(value: Int?): AddressRecord {
        this.apartment = value
        return this
    }

    override fun value4(value: Int?): AddressRecord {
        this.building = value
        return this
    }

    override fun value5(value: Int?): AddressRecord {
        this.house = value
        return this
    }

    override fun value6(value: String?): AddressRecord {
        this.street = value
        return this
    }

    override fun values(
        value1: Int?,
        value2: Int?,
        value3: Int?,
        value4: Int?,
        value5: Int?,
        value6: String?
    ): AddressRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    constructor(
        id: Int? = null,
        cityId: Int? = null,
        apartment: Int? = null,
        building: Int? = null,
        house: Int? = null,
        street: String? = null
    ) : this() {
        this.id = id
        this.cityId = cityId
        this.apartment = apartment
        this.building = building
        this.house = house
        this.street = street
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    constructor(value: com.fs.domain.jooq.tables.pojos.Address?) : this() {
        if (value != null) {
            this.id = value.id
            this.cityId = value.cityId
            this.apartment = value.apartment
            this.building = value.building
            this.house = value.house
            this.street = value.street
        }
    }
}
