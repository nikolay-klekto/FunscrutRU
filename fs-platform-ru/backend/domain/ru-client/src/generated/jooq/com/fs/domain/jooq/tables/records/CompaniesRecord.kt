/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.tables.records


import com.fs.domain.jooq.enums.Industry
import com.fs.domain.jooq.tables.Companies

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CompaniesRecord() : UpdatableRecordImpl<CompaniesRecord>(Companies.COMPANIES),
    Record5<Long?, Industry?, String?, String?, String?> {

    var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    var companyIndustry: Industry?
        set(value): Unit = set(1, value)
        get(): Industry? = get(1) as Industry?

    var name: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    var site: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    var shortDescription: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Long?, Industry?, String?, String?, String?> =
        super.fieldsRow() as Row5<Long?, Industry?, String?, String?, String?>

    override fun valuesRow(): Row5<Long?, Industry?, String?, String?, String?> =
        super.valuesRow() as Row5<Long?, Industry?, String?, String?, String?>

    override fun field1(): Field<Long?> = Companies.COMPANIES.ID
    override fun field2(): Field<Industry?> = Companies.COMPANIES.COMPANY_INDUSTRY
    override fun field3(): Field<String?> = Companies.COMPANIES.NAME
    override fun field4(): Field<String?> = Companies.COMPANIES.SITE
    override fun field5(): Field<String?> = Companies.COMPANIES.SHORT_DESCRIPTION
    override fun component1(): Long? = id
    override fun component2(): Industry? = companyIndustry
    override fun component3(): String? = name
    override fun component4(): String? = site
    override fun component5(): String? = shortDescription
    override fun value1(): Long? = id
    override fun value2(): Industry? = companyIndustry
    override fun value3(): String? = name
    override fun value4(): String? = site
    override fun value5(): String? = shortDescription

    override fun value1(value: Long?): CompaniesRecord {
        this.id = value
        return this
    }

    override fun value2(value: Industry?): CompaniesRecord {
        this.companyIndustry = value
        return this
    }

    override fun value3(value: String?): CompaniesRecord {
        this.name = value
        return this
    }

    override fun value4(value: String?): CompaniesRecord {
        this.site = value
        return this
    }

    override fun value5(value: String?): CompaniesRecord {
        this.shortDescription = value
        return this
    }

    override fun values(
        value1: Long?,
        value2: Industry?,
        value3: String?,
        value4: String?,
        value5: String?
    ): CompaniesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised CompaniesRecord
     */
    constructor(
        id: Long? = null,
        companyIndustry: Industry? = null,
        name: String? = null,
        site: String? = null,
        shortDescription: String? = null
    ) : this() {
        this.id = id
        this.companyIndustry = companyIndustry
        this.name = name
        this.site = site
        this.shortDescription = shortDescription
    }

    /**
     * Create a detached, initialised CompaniesRecord
     */
    constructor(value: com.fs.domain.jooq.tables.pojos.Companies?) : this() {
        if (value != null) {
            this.id = value.id
            this.companyIndustry = value.companyIndustry
            this.name = value.name
            this.site = value.site
            this.shortDescription = value.shortDescription
        }
    }
}
