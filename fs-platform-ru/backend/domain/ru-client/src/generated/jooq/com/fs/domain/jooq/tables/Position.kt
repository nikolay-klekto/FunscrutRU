/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.tables


import com.fs.domain.jooq.Public
import com.fs.domain.jooq.keys.POSITION_PKEY
import com.fs.domain.jooq.tables.records.PositionRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Position(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, PositionRecord>?,
    aliased: Table<PositionRecord>?,
    parameters: Array<Field<*>?>?
) : TableImpl<PositionRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.position</code>
         */
        val POSITION: Position = Position()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PositionRecord> = PositionRecord::class.java

    /**
     * The column <code>public.position.id</code>.
     */
    val ID: TableField<PositionRecord, Int?> =
        createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.position.description</code>.
     */
    val DESCRIPTION: TableField<PositionRecord, String?> =
        createField(DSL.name("description"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.position.name</code>.
     */
    val NAME: TableField<PositionRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "")

    private constructor(alias: Name, aliased: Table<PositionRecord>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<PositionRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        aliased,
        parameters
    )

    /**
     * Create an aliased <code>public.position</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.position</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.position</code> table reference
     */
    constructor() : this(DSL.name("position"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, PositionRecord>) : this(
        Internal.createPathAlias(
            child,
            key
        ), child, key, POSITION, null
    )

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<PositionRecord, Int?> = super.getIdentity() as Identity<PositionRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PositionRecord> = POSITION_PKEY
    override fun `as`(alias: String): Position = Position(DSL.name(alias), this)
    override fun `as`(alias: Name): Position = Position(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Position = Position(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Position = Position(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Int?, String?, String?> = super.fieldsRow() as Row3<Int?, String?, String?>
}
