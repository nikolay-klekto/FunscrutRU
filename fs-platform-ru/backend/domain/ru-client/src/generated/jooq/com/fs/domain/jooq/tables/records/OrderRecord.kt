/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.tables.records


import com.fs.domain.jooq.tables.Order
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record9
import org.jooq.Row9
import org.jooq.impl.UpdatableRecordImpl
import java.time.LocalDateTime


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OrderRecord() : UpdatableRecordImpl<OrderRecord>(Order.ORDER),
    Record9<Int?, Int?, Int?, Int?, Int?, Int?, Boolean?, LocalDateTime?, Int?> {

    var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    var basketId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    var cityId: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    var companyId: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    var positionId: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    var serviceId: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    @set:JvmName("setIsExpired")
    var isExpired: Boolean?
        set(value): Unit = set(6, value)
        get(): Boolean? = get(6) as Boolean?

    var startWorkDate: LocalDateTime?
        set(value): Unit = set(7, value)
        get(): LocalDateTime? = get(7) as LocalDateTime?

    var totalWorkDays: Int?
        set(value): Unit = set(8, value)
        get(): Int? = get(8) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row9<Int?, Int?, Int?, Int?, Int?, Int?, Boolean?, LocalDateTime?, Int?> =
        super.fieldsRow() as Row9<Int?, Int?, Int?, Int?, Int?, Int?, Boolean?, LocalDateTime?, Int?>

    override fun valuesRow(): Row9<Int?, Int?, Int?, Int?, Int?, Int?, Boolean?, LocalDateTime?, Int?> =
        super.valuesRow() as Row9<Int?, Int?, Int?, Int?, Int?, Int?, Boolean?, LocalDateTime?, Int?>

    override fun field1(): Field<Int?> = Order.ORDER.ID
    override fun field2(): Field<Int?> = Order.ORDER.BASKET_ID
    override fun field3(): Field<Int?> = Order.ORDER.CITY_ID
    override fun field4(): Field<Int?> = Order.ORDER.COMPANY_ID
    override fun field5(): Field<Int?> = Order.ORDER.POSITION_ID
    override fun field6(): Field<Int?> = Order.ORDER.SERVICE_ID
    override fun field7(): Field<Boolean?> = Order.ORDER.IS_EXPIRED
    override fun field8(): Field<LocalDateTime?> = Order.ORDER.START_WORK_DATE
    override fun field9(): Field<Int?> = Order.ORDER.TOTAL_WORK_DAYS
    override fun component1(): Int? = id
    override fun component2(): Int? = basketId
    override fun component3(): Int? = cityId
    override fun component4(): Int? = companyId
    override fun component5(): Int? = positionId
    override fun component6(): Int? = serviceId
    override fun component7(): Boolean? = isExpired
    override fun component8(): LocalDateTime? = startWorkDate
    override fun component9(): Int? = totalWorkDays
    override fun value1(): Int? = id
    override fun value2(): Int? = basketId
    override fun value3(): Int? = cityId
    override fun value4(): Int? = companyId
    override fun value5(): Int? = positionId
    override fun value6(): Int? = serviceId
    override fun value7(): Boolean? = isExpired
    override fun value8(): LocalDateTime? = startWorkDate
    override fun value9(): Int? = totalWorkDays

    override fun value1(value: Int?): OrderRecord {
        this.id = value
        return this
    }

    override fun value2(value: Int?): OrderRecord {
        this.basketId = value
        return this
    }

    override fun value3(value: Int?): OrderRecord {
        this.cityId = value
        return this
    }

    override fun value4(value: Int?): OrderRecord {
        this.companyId = value
        return this
    }

    override fun value5(value: Int?): OrderRecord {
        this.positionId = value
        return this
    }

    override fun value6(value: Int?): OrderRecord {
        this.serviceId = value
        return this
    }

    override fun value7(value: Boolean?): OrderRecord {
        this.isExpired = value
        return this
    }

    override fun value8(value: LocalDateTime?): OrderRecord {
        this.startWorkDate = value
        return this
    }

    override fun value9(value: Int?): OrderRecord {
        this.totalWorkDays = value
        return this
    }

    override fun values(
        value1: Int?,
        value2: Int?,
        value3: Int?,
        value4: Int?,
        value5: Int?,
        value6: Int?,
        value7: Boolean?,
        value8: LocalDateTime?,
        value9: Int?
    ): OrderRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        return this
    }

    /**
     * Create a detached, initialised OrderRecord
     */
    constructor(
        id: Int? = null,
        basketId: Int? = null,
        cityId: Int? = null,
        companyId: Int? = null,
        positionId: Int? = null,
        serviceId: Int? = null,
        isExpired: Boolean? = null,
        startWorkDate: LocalDateTime? = null,
        totalWorkDays: Int? = null
    ) : this() {
        this.id = id
        this.basketId = basketId
        this.cityId = cityId
        this.companyId = companyId
        this.positionId = positionId
        this.serviceId = serviceId
        this.isExpired = isExpired
        this.startWorkDate = startWorkDate
        this.totalWorkDays = totalWorkDays
    }

    /**
     * Create a detached, initialised OrderRecord
     */
    constructor(value: com.fs.domain.jooq.tables.pojos.Order?) : this() {
        if (value != null) {
            this.id = value.id
            this.basketId = value.basketId
            this.cityId = value.cityId
            this.companyId = value.companyId
            this.positionId = value.positionId
            this.serviceId = value.serviceId
            this.isExpired = value.isExpired
            this.startWorkDate = value.startWorkDate
            this.totalWorkDays = value.totalWorkDays
        }
    }
}
