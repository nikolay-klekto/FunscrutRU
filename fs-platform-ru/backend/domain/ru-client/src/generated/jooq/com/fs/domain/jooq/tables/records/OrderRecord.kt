/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.tables.records


import com.fs.domain.jooq.tables.Order
import com.fs.service.ru.enums.OrderStatus

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record10
import org.jooq.Row10
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OrderRecord() : UpdatableRecordImpl<OrderRecord>(Order.ORDER), Record10<Long?, Long?, Long?, Long?, Long?, LocalDateTime?, Long?, Double?, OrderStatus?, LocalDateTime?> {

    var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    var basketId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    var companyOfficeId: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    var positionId: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    var serviceId: Long?
        set(value): Unit = set(4, value)
        get(): Long? = get(4) as Long?

    var startWorkDate: LocalDateTime?
        set(value): Unit = set(5, value)
        get(): LocalDateTime? = get(5) as LocalDateTime?

    var totalWorkDays: Long?
        set(value): Unit = set(6, value)
        get(): Long? = get(6) as Long?

    var price: Double?
        set(value): Unit = set(7, value)
        get(): Double? = get(7) as Double?

    var orderStatus: OrderStatus?
        set(value): Unit = set(8, value)
        get(): OrderStatus? = get(8) as OrderStatus?

    var dateCreated: LocalDateTime?
        set(value): Unit = set(9, value)
        get(): LocalDateTime? = get(9) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row10<Long?, Long?, Long?, Long?, Long?, LocalDateTime?, Long?, Double?, OrderStatus?, LocalDateTime?> = super.fieldsRow() as Row10<Long?, Long?, Long?, Long?, Long?, LocalDateTime?, Long?, Double?, OrderStatus?, LocalDateTime?>
    override fun valuesRow(): Row10<Long?, Long?, Long?, Long?, Long?, LocalDateTime?, Long?, Double?, OrderStatus?, LocalDateTime?> = super.valuesRow() as Row10<Long?, Long?, Long?, Long?, Long?, LocalDateTime?, Long?, Double?, OrderStatus?, LocalDateTime?>
    override fun field1(): Field<Long?> = Order.ORDER.ID
    override fun field2(): Field<Long?> = Order.ORDER.BASKET_ID
    override fun field3(): Field<Long?> = Order.ORDER.COMPANY_OFFICE_ID
    override fun field4(): Field<Long?> = Order.ORDER.POSITION_ID
    override fun field5(): Field<Long?> = Order.ORDER.SERVICE_ID
    override fun field6(): Field<LocalDateTime?> = Order.ORDER.START_WORK_DATE
    override fun field7(): Field<Long?> = Order.ORDER.TOTAL_WORK_DAYS
    override fun field8(): Field<Double?> = Order.ORDER.PRICE
    override fun field9(): Field<OrderStatus?> = Order.ORDER.ORDER_STATUS
    override fun field10(): Field<LocalDateTime?> = Order.ORDER.DATE_CREATED
    override fun component1(): Long? = id
    override fun component2(): Long? = basketId
    override fun component3(): Long? = companyOfficeId
    override fun component4(): Long? = positionId
    override fun component5(): Long? = serviceId
    override fun component6(): LocalDateTime? = startWorkDate
    override fun component7(): Long? = totalWorkDays
    override fun component8(): Double? = price
    override fun component9(): OrderStatus? = orderStatus
    override fun component10(): LocalDateTime? = dateCreated
    override fun value1(): Long? = id
    override fun value2(): Long? = basketId
    override fun value3(): Long? = companyOfficeId
    override fun value4(): Long? = positionId
    override fun value5(): Long? = serviceId
    override fun value6(): LocalDateTime? = startWorkDate
    override fun value7(): Long? = totalWorkDays
    override fun value8(): Double? = price
    override fun value9(): OrderStatus? = orderStatus
    override fun value10(): LocalDateTime? = dateCreated

    override fun value1(value: Long?): OrderRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): OrderRecord {
        this.basketId = value
        return this
    }

    override fun value3(value: Long?): OrderRecord {
        this.companyOfficeId = value
        return this
    }

    override fun value4(value: Long?): OrderRecord {
        this.positionId = value
        return this
    }

    override fun value5(value: Long?): OrderRecord {
        this.serviceId = value
        return this
    }

    override fun value6(value: LocalDateTime?): OrderRecord {
        this.startWorkDate = value
        return this
    }

    override fun value7(value: Long?): OrderRecord {
        this.totalWorkDays = value
        return this
    }

    override fun value8(value: Double?): OrderRecord {
        this.price = value
        return this
    }

    override fun value9(value: OrderStatus?): OrderRecord {
        this.orderStatus = value
        return this
    }

    override fun value10(value: LocalDateTime?): OrderRecord {
        this.dateCreated = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: Long?, value4: Long?, value5: Long?, value6: LocalDateTime?, value7: Long?, value8: Double?, value9: OrderStatus?, value10: LocalDateTime?): OrderRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        return this
    }

    /**
     * Create a detached, initialised OrderRecord
     */
    constructor(id: Long? = null, basketId: Long? = null, companyOfficeId: Long? = null, positionId: Long? = null, serviceId: Long? = null, startWorkDate: LocalDateTime? = null, totalWorkDays: Long? = null, price: Double? = null, orderStatus: OrderStatus? = null, dateCreated: LocalDateTime? = null): this() {
        this.id = id
        this.basketId = basketId
        this.companyOfficeId = companyOfficeId
        this.positionId = positionId
        this.serviceId = serviceId
        this.startWorkDate = startWorkDate
        this.totalWorkDays = totalWorkDays
        this.price = price
        this.orderStatus = orderStatus
        this.dateCreated = dateCreated
    }

    /**
     * Create a detached, initialised OrderRecord
     */
    constructor(value: com.fs.domain.jooq.tables.pojos.Order?): this() {
        if (value != null) {
            this.id = value.id
            this.basketId = value.basketId
            this.companyOfficeId = value.companyOfficeId
            this.positionId = value.positionId
            this.serviceId = value.serviceId
            this.startWorkDate = value.startWorkDate
            this.totalWorkDays = value.totalWorkDays
            this.price = value.price
            this.orderStatus = value.orderStatus
            this.dateCreated = value.dateCreated
        }
    }
}
