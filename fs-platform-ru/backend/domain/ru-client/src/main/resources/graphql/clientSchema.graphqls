scalar LocalDateTime
scalar LocalDate

type Query {
    clientById(id: ID!): Client

    serviceById(id: ID!): Service
    getAllServices: [Service]

    reviewById(id: ID!): Review
    getAllReviews: [Review]

    getCity(id: ID!): City
    getCountryByCity(id: ID): Country

    getOrderById(id: ID!): Order
    getOrdersByClientId(clientId: ID): [Order]
    getOrdersByBasketId(basketId: ID): [Order]
}

type Mutation {
    addService(services: ServiceInput): Service
    updateServiceById(id: ID, service: ServiceInput): Boolean
    deleteServiceById(id: ID): Boolean

    addReview(review: ReviewInput): Review
    updateReview(review: ReviewInput): Boolean
    deleteReviewById(id: ID): Boolean

    addCity(city: CityInput): City
    deleteCity(cityId: ID): Boolean

    addOrder(order: OrderInput): Order
    updateOrder(order: OrderInput): Boolean
}

input ServiceInput {
    id: ID
    price: ID
    name: String
}

input ReviewInput {
    id: ID!
    companyId: ID
    description: String,
    rate: ID
    username: String
}

input CityInput {
    id: ID,
    countryCode: ID,
    name: String
}

input CountryInput {
    code: ID,
    currency: CurrencyEnum,
    name: CountryCodeEnum
}

input OrderInput {
    id: ID
    basket: ID
    city: ID
    company: ID
    position: ID
    service: ID
    isExpired: Boolean
    startWorkDate: LocalDateTime
    totalWorkDays: ID
}

type Review {
    id: ID
    companyId: ID
    dateCreated: LocalDateTime
    description: String,
    rate: ID
    username: String
}

type Order {
    id: ID
    basket: Basket
    city: City
    company: Companies
    position: Position
    service: Service
    isExpired: Boolean
    startWorkDate: LocalDateTime
    totalWorkDays: ID
}

type Companies {
    id: ID
    companyIndustry: CompanyIndustryEnum
    name: String
    site: String
    shortDescription: String
}

type Position {
    id: ID
    description: String
    name: String
}

type Service {
    id: ID
    price: ID
    name: String
}

type Client {
    id: ID!,
    basket: Basket,
    city: City,
    activateStatus: Boolean,
    birthday: LocalDate,
    dateCreated: LocalDate,
    educationModelStatus: EducationEnum,
    email: String,
    employment: EmploymentEnum,
    firstName: String,
    lastName: String,
    orderQuantity: ID,
    password: String,
    phoneNumber: String,
    role: ClientRoleEnum,
    telegramUsername: String,
    username: String
}

type Basket {
    id: ID,
    totalPrice: String
}

type City {
    id: ID,
    country: Country,
    name: String
}

type Country {
    code: ID,
    currency: CurrencyEnum,
    name: CountryCodeEnum
}

enum EducationEnum {
    LOWER_SECONDARY
    SECONDARY
    INCOMPLETE_HIGHER
    HIGHER
    MAGISTRACY
    OTHER
}

enum EmploymentEnum {
    SELF_EMPLOYED
    SCHOOL_BOY
    STUDENT
    PENSIONER
    UNEMPLOYED
    EMPLOYER
    EMPLOYEE
    OTHER
}

enum ClientRoleEnum {
    CLIENT
    PARTNER
    ADMIN
}

enum CurrencyEnum {
    BYN
    USD
    EUR
    RUB
    PLN
}

enum CountryCodeEnum {
    BELARUS
    RUSSIA
    POLAND
}

enum CompanyIndustryEnum {
    IT
    BOOKKEEPING
    FEC
    SERVICE
    ARMY
    SECURITY
    RAWMATERIALSMINING
    ART
    MEDICINE
    SCIENCE
    GOV_SERVICE
    SALES
    PRODUCTION
    BUILDING
    TRANSPORT
    OTHER
}

enum legalCapacityStatus {
    CAPABLE
    TEMPORARILY_UNAVAILABLE
    CLOSED
}


