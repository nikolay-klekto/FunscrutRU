scalar LocalDateTime
scalar LocalDate

type Query {
    clientById(id: ID!): Client

    serviceById(id: ID!): Service
    getAllServices: [Service]

    reviewById(id: ID!): Review
    getAllReviews: [Review]

}

type Mutation {
    addService(services: ServiceInput): Service
    updateServiceById(id: ID, service: ServiceInput): Boolean
    deleteServiceById(id: ID): Boolean

    addReview(review: ReviewInput): Review
    updateReview(review: ReviewInput): Boolean
    deleteReviewById(id: ID): Boolean

}

type Review {
    id: ID
    companyId: ID
    dateCreated: LocalDateTime
    description: String,
    rate: ID
    username: String
}



type Service {
    id: ID
    price: ID
    name: String
}

input ServiceInput {
    id: ID
    price: ID
    name: String
}

input ReviewInput {
    id: ID!
    companyId: ID
    description: String,
    rate: ID
    username: String
}


type Client {
    id: ID!,
    basket: Basket,
    city: City,
    activateStatus: Boolean,
    birthday: LocalDate,
    dateCreated: LocalDate,
    educationModelStatus: EducationEnum,
    email: String,
    employment: EmploymentEnum,
    firstName: String,
    lastName: String,
    orderQuantity: ID,
    password: String,
    phoneNumber: String,
    role: ClientRoleEnum,
    telegramUsername: String,
    username: String
}

type Basket {
    id: ID,
    totalPrice: String
}

type City {
    id: ID,
    country: Country,
    name: String
}

type Country {
    code: ID,
    currency: CurrencyEnum,
    name: CountryCodeEnum
}

enum EducationEnum {
    LOWER_SECONDARY
    SECONDARY
    INCOMPLETE_HIGHER
    HIGHER
    MAGISTRACY
    OTHER
}

enum EmploymentEnum {
    SELF_EMPLOYED
    SCHOOL_BOY
    STUDENT
    PENSIONER
    UNEMPLOYED
    EMPLOYER
    EMPLOYEE
    OTHER
}

enum ClientRoleEnum {
    CLIENT
    PARTNER
    ADMIN
}

enum CurrencyEnum {
    BYN
    USD
    EUR
    RUB
    PLN
}

enum CountryCodeEnum {
    BELARUS
    RUSSIA
    POLAND
}

