#scalar DateTime

type Query {
    clientById(id: ID!): Client
    serviceById(id: ID!): Service
    getAllServices: [Service]
}

type Mutation {
    addService(services: ServiceInput): Service
    updateServiceById(id: Int, service: ServiceInput): Boolean
    deleteServiceById(id: Int): Boolean
}

type Service {
    id: ID
    price: Int
    name: String
}

input ServiceInput {
    id: ID
    price: Int
    name: String
}


type Client {
    id: ID!,
    basket: Basket,
    city: City,
    activateStatus: Boolean,
    birthday: String,
    dateCreated: String,
    educationModelStatus: EducationEnum,
    email: String,
    employment: EmploymentEnum,
    firstName: String,
    lastName: String,
    orderQuantity: Int,
    password: String,
    phoneNumber: String,
    role: ClientRoleEnum,
    telegramUsername: String,
    username: String
}

type Basket {
    id: ID,
    totalPrice: String
}

type City {
    id: ID,
    country: Country,
    name: String
}

type Country {
    code: ID,
    currency: CurrencyEnum,
    name: CountryCodeEnum
}

enum EducationEnum {
    LOWER_SECONDARY
    SECONDARY
    INCOMPLETE_HIGHER
    HIGHER
    MAGISTRACY
    OTHER
}

enum EmploymentEnum {
    SELF_EMPLOYED
    SCHOOL_BOY
    STUDENT
    PENSIONER
    UNEMPLOYED
    EMPLOYER
    EMPLOYEE
    OTHER
}

enum ClientRoleEnum {
    CLIENT
    PARTNER
    ADMIN
}

enum CurrencyEnum {
    BYN
    USD
    EUR
    RUB
    PLN
}

enum CountryCodeEnum {
    BELARUS
    RUSSIA
    POLAND
}

