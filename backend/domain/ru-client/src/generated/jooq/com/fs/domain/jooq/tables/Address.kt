/*
 * This file is generated by jOOQ.
 */
package com.fs.domain.jooq.tables


import com.fs.domain.jooq.DefaultSchema
import com.fs.domain.jooq.keys.ADDRESS_PKEY
import com.fs.domain.jooq.keys.ADDRESS__ADDRESS_CITY_ID_FKEY
import com.fs.domain.jooq.tables.records.AddressRecord

import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Address(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AddressRecord>?,
    aliased: Table<AddressRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<AddressRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>address</code>
         */
        val ADDRESS: Address = Address()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AddressRecord> = AddressRecord::class.java

    /**
     * The column <code>address.id</code>.
     */
    val ID: TableField<AddressRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>address.city_id</code>.
     */
    val CITY_ID: TableField<AddressRecord, Long?> = createField(DSL.name("city_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>address.street</code>.
     */
    val STREET: TableField<AddressRecord, String?> = createField(DSL.name("street"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>address.house</code>.
     */
    val HOUSE: TableField<AddressRecord, String?> = createField(DSL.name("house"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>address.office_number</code>.
     */
    val OFFICE_NUMBER: TableField<AddressRecord, String?> = createField(DSL.name("office_number"), SQLDataType.VARCHAR, this, "")

    private constructor(alias: Name, aliased: Table<AddressRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<AddressRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>address</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>address</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>address</code> table reference
     */
    constructor(): this(DSL.name("address"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, AddressRecord>): this(Internal.createPathAlias(child, key), child, key, ADDRESS, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<AddressRecord, Long?> = super.getIdentity() as Identity<AddressRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<AddressRecord> = ADDRESS_PKEY
    override fun getReferences(): List<ForeignKey<AddressRecord, *>> = listOf(ADDRESS__ADDRESS_CITY_ID_FKEY)

    private lateinit var _city: City

    /**
     * Get the implicit join path to the <code>public.city</code> table.
     */
    fun city(): City {
        if (!this::_city.isInitialized)
            _city = City(this, ADDRESS__ADDRESS_CITY_ID_FKEY)

        return _city;
    }

    val city: City
        get(): City = city()
    override fun `as`(alias: String): Address = Address(DSL.name(alias), this)
    override fun `as`(alias: Name): Address = Address(alias, this)
    override fun `as`(alias: Table<*>): Address = Address(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Address = Address(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Address = Address(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Address = Address(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<Long?, Long?, String?, String?, String?> = super.fieldsRow() as Row5<Long?, Long?, String?, String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?, String?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?, String?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
